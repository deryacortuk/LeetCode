" Given a string s, find the length of the longest substring without repeating characters. 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3."

1. Solution

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) < 2:
            return len(s)
        longest = ""
        curr = ""
        
        for i, ch in enumerate(s):
            index = curr.find(ch)
            if index == -1:
                curr += ch
                if len(curr) > len(longest):
                    longest = curr
            else:
                curr = curr[index+1:]
                curr+=ch
                
        
        return len(longest)
        
        
  2. Solution
  
  class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        start = -1
        ml=0
        h=dict()
        for i in set(s):
            h[i] = -1
        for i in range(len(s)):
            if h[s[i]] > start:
                start = h[s[i]]
            if i-start >ml:
                ml=i-start
            
            h[s[i]] = i
        return ml
