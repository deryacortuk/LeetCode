" Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray 
[numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead. 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint."

1. Solution

class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        total = start = 0
        min_len = float('inf')
        for i, num in enumerate(nums):
            total += num
            while total >= s:
                min_len = min(min_len, i - start + 1)
                total -= nums[start]
                start += 1
        return min_len if min_len != float('inf') else 0

2. Solution
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        
        total = left = 0
        result = len(nums) + 1
        for right, n in enumerate(nums):
            total += n
            while total >= target:
                result = min(result, right - left + 1)
                total -= nums[left]
                left += 1
        return result if result <= len(nums) else 0

3. Solution
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        cur = 0
        n = len(nums)
        l = 0
        minL = n+1
        
        for r in range(n):
            cur+=nums[r]
            
            while cur>=target:
                if r-l+1<minL:
                    minL = r-l+1
                    
                cur-= nums[l]
                l+=1
                
        return minL if minL<=n else 0
