"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where 
prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false. 

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.,
Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. 

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique."

# This is a graph question. Any graph question to get directed acyclic graph (DAG) should think about using the topologic sort. This question is great practices. 
# We return false if there is cycle in this graph otherwise return true.

# Time Complexity: O(E+V) where V is the number of courses, and E is the number of dependencies.

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # create the adjacency list
        # [[0,1], [0,2], [1,3], [1,4], [3,4]]
        
        pre_map = { i:[] for i in range(numCourses) }
        for c, p in prerequisites:
            pre_map[c].append(p)
        
        visited = set()
        def dfs(curr):
            if len(pre_map[curr]) == 0:
                return True
            
            if curr in visited:
                return False
            visited.add(curr)
            
            for p in pre_map[curr]:
                if not dfs(p):
                    return False

            # visited.remove(curr)
            pre_map[curr] = []
            return True
        
        # reason of looping every one is the graph might not be all connected
        # 1 -> 2; 3 -> 4
        for course in range(numCourses):
            if not dfs(course):
                return False
        
        return True
