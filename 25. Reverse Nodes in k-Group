" Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, 
in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed."

1.Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head or k == 1:
            return head

        def getLength(head: ListNode) -> int:
            length = 0
            while head:
                length += 1
                head = head.next
            return length

        length = getLength(head)
        dummy = ListNode(0, head)
        prev = dummy
        curr = head

        for _ in range(length // k):
            for _ in range(k - 1):
                next = curr.next
                curr.next = next.next
                next.next = prev.next
                prev.next = next
            prev = curr
            curr = curr.next

        return dummy.next
2.Solution

class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        list = []
        
        while head:
            temp = []
            for i in range(k):
                temp.append(head)
                if head.next:
                    head = head.next
                else:
                    head = None
                    break
            list.append(temp)
                
        for temp in list:
            if len(temp) == k:
                for i in reversed(range(k)):
                    if i > 0:
                        temp[i].next = temp[i-1]
                    else:
                        temp[i].next = None
        for i in range(len(list)-1):
            if len(list[i+1]) == k:
                list[i][0].next = list[i+1][k-1]
            else:
                list[i][0].next = list[i+1][0]

        return list[0][k-1]
