" You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. 
Any answer with a calculation error less than 10-5 will be accepted."

# Coding Patterns: Sliding Window
# Sliding window problems is that most of the time they can be solved in O(N) time and O(1) space complexity."

1. Solution
 class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        
        max_sum = sum(nums[:k])
        
        result = max_sum
        
        for i in range(k, len(nums)):
            
            max_sum += nums[i] - nums[i - k]
            result = max(max_sum, result)
            
        return result / k
        
        
2. Solution

class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        sub = [0]*(len(nums)+1)
        for i in range(1,len(nums)+1):
            sub[i] = sub[i-1] + nums[i-1]
        maxx = -(10**6)
        s = 0
        for j in range(k,len(nums)+1):
            s = sub[j] - sub[j-k]
            if(s > maxx):
                maxx = s
        return(maxx/k)    
