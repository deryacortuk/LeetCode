" Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node. "

1. Solution

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow
        
2. Solution

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        if head == None:
            return head
        
        count = 0
        
        fast = head
        
        while fast != None:
            fast = fast.next
            count += 1
            
        midd = count // 2  + 1
        
        slow = head
        
        for i in range(1, midd):
            slow = slow.next
            
        return slow
        
        
3. Solution

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        nodes = []
        current = head
        
        while current:
            nodes.append(current)
            current = current.next
            
        return nodes[len(nodes) // 2]


 
