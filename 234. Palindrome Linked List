" Given the head of a singly linked list, return true if it is a palindrome. 

Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9 

Follow up: Could you do it in O(n) time and O(1) space? "


Solution 1:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        fast = slow = head
        
        while fast and fast.next:
            slow, fast = slow.next, fast.next.next
            
        # reverse second half list
        prev = None
        
        while slow:
            slow.next, prev, slow = prev, slow, slow.next
            
        
        while prev:
            if prev.val != head.val:
                return False
            prev, head = prev.next, head.next
        
        return True
        

Solution 2:

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        arr = []
        
        while head:
            arr.append(head.val)
            head = head.next
        return arr == arr[::-1]
        
Solution 3:

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        fast = slow = head
        
        arr = []
        
        while fast and fast.next:
            arr.append(slow.val)
            slow = slow.next
            fast = fast.next.next
            
        if fast:
            slow = slow.next
            
        while slow:
            top = arr.pop()
            if top != slow.val:
                return False
            
            slow = slow.next
        return True
        
        
