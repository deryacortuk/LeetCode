# Time Complexity: O(n) 
# Auxiliary Space: O(n) due to recursive calls

# Implementation: 

class Node: 
   
    def __init__(self, data):
        self.data = data
        self.left = self.right = None

class Height:
    def __init__(self):
        self.h = 0

class Solution:
    
    #Function to return the diameter of a Binary Tree.
    
    def diameter(self,root):
        height = Height()
        return self.diameterOpt(root, height)
        
    def diameterOpt(self, root, height):
 
    # to store height of left and right subtree
        lh = Height()
        rh = Height()
 
    # base condition- when binary tree is empty
        if root is None:
            height.h = 0
            return 0
            
        ldiameter = self.diameterOpt(root.left, lh)
        rdiameter = self.diameterOpt(root.right, rh)
        
        height.h = max(lh.h, rh.h) + 1
        return max(lh.h + rh.h + 1, max(ldiameter, rdiameter))
      
