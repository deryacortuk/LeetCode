"Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. 
Find the two elements that appear only once. You can return the answer in any order.
You must write an algorithm that runs in linear runtime complexity and uses only constant extra space."

# Bitwise XOR Solution

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        
        xor = 0
        
        for i in nums:
            xor ^= i
            
        f = 1
        
        while not (xor & 1):
            xor >>= 1
            f <<= 1
                
        x = y = 0
                
        for i in nums:
            if i & f:
                x ^= i
            else:
                y ^= i
                
        return [x,y]
                
      # Other Solutions
      
class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:

        # XOR of all numbers in the given list
        n1xn2 = 0
        for num in nums:
            n1xn2 ^= num

        # rightmost bit which is 1
        rightmost_bit = 1
        while rightmost_bit & n1xn2 == 0:
            rightmost_bit = rightmost_bit << 1

        num1, num2 = 0, 0
        
        for num in nums:
            if num & rightmost_bit != 0:  # the bit is set
                num1 ^= num
            else:  # the bit is not set
                num2 ^= num

        return [num1, num2]
        
      
class Solution:
    def singleNumber(self, nums):
        s = reduce(xor, nums)
        nz = s & (s-1) ^ s
        num1 = reduce(xor, filter(lambda n: n & nz, nums))
        return(num1, s ^ num1)
