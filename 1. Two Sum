" Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order. 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. "

1. Solution

class Solution:
    def twoSum(self, nums: List[int], target: int):
        values = {}
        
        for i, value in enumerate(nums):
            if target - value in values:
                return [values[target - value],i]
            else:
                values[value] = i
         
 2. Solution
 
 class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        idx = list(range(len(nums)))
        idx.sort(key=lambda x: nums[x])
        i, j = 0, len(nums) - 1
        while i < j:
            if nums[idx[i]] + nums[idx[j]] == target:
                return [idx[i], idx[j]]
            if nums[idx[i]] + nums[idx[j]] < target:
                i += 1
            else:
                j -= 1
            
        return None
        
3. Solution
class Solution:
     def twoSum(self, nums: List[int], target: int) -> List[int]:
        left, right = 0, len(nums) - 1
        while left < right:
            current_sum = nums[left] + nums[right]
            if current_sum == target:
                return [left, right]

            if target > current_sum:
                left += 1  # we need a pair with a bigger sum
           else:
               right -= 1  # we need a pair with a smaller sum
       return [-1, -1]
