# Merge Interval

"You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and
the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that
represents the start and end of another interval.

Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any 
overlapping intervals (merge overlapping intervals if necessary).
Return intervals after the insertion. "

1. Solution

class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        
        n = len(intervals)
        ans = []
        i = 0

        while i < n and intervals[i][1] < newInterval[0]:
            ans.append(intervals[i])
            i += 1

        while i < n and intervals[i][0] <= newInterval[1]:
            newInterval[0] = min(newInterval[0], intervals[i][0])
            newInterval[1] = max(newInterval[1], intervals[i][1])
            i += 1

        ans.append(newInterval)

        while i < n:
            ans.append(intervals[i])
            i += 1

        return ans
        
2. Solution

import bisect


class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
    
        i = bisect.bisect_left(intervals, True, key = lambda interval: interval[1] >= newInterval[0])
        
        j = bisect.bisect_left(intervals, [newInterval[1], inf])
        
        left = min(intervals[i][0], newInterval[0]) if i < len(intervals) else newInterval[0]
        
        right = max(intervals[j - 1][1], newInterval[1]) if j > 0 else newInterval[1]
        
        intervals[i:j] = [[left, right ]]
        
        return intervals
