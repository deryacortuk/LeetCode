"You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.

In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.

For example, if stamp = "abc" and target = "abcba", then s is "?????" initially. In one turn you can:
place stamp at index 0 of s to obtain "abc??",
place stamp at index 1 of s to obtain "?abc?", or
place stamp at index 2 of s to obtain "??abc".
Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).
We want to convert s to target using at most 10 * target.length turns.

Return an array of the index of the left-most letter being stamped at each turn.
If we cannot obtain target from s within 10 * target.length turns, return an empty array."

1. Solution

class Solution:
    def movesToStamp(self, stamp: str, target: str) -> List[int]:
        
        def stampify(s):
            count = len(stamp)
            
            for i, st in enumerate(stamp):
                if target[s + i] == "?":
                    count -= 1
                elif target[s + i] != st:
                    return 0
                
            for i in range(s, s + len(stamp)):
                target[i] = "?"
            return count
        
        
        result = []
        
        target = list(target)
        count = 0
        stamped = [False] * len(target)
        
        while count < len(target):
            isStamped = False
            
            for i in range(len(target) - len(stamp) + 1):
                if stamped[i]:
                    continue
                    
                stampified = stampify(i)
                
                if stampified == 0:
                    continue
                
                count += stampified
                
                isStamped = True
                stamped[i] = True
                result.append(i)
            if not isStamped:
                return []
        return result[::-1]
        
        
        
2.Solution

class Solution:
    
    def movesToStamp(self, S: str, T: str) -> List[int]:
        if S == T: return [0]
        S, T = list(S), list(T)
        slen, tlen = len(S), len(T) - len(S) + 1
        ans, tdiff, sdiff = [], True, True
        while tdiff:
            tdiff = False
            for i in range(tlen):
                sdiff = False
                for j in range(slen):
                    if T[i+j] == "?": continue
                    if T[i+j] != S[j]: break
                    sdiff = True
                else: 
                    if sdiff:
                        tdiff = True
                        for j in range(i, i + slen): T[j] = "?"
                        ans.append(i)
        for i in range(len(T)):
            if T[i] != "?": return []
        return ans[::-1]
        
